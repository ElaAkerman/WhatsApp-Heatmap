{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3be8a599",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a779702f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import re\n",
    "\n",
    "\n",
    "# Consts:\n",
    "DAYS = {\n",
    "    0: 'Monday',\n",
    "    1: 'Tuesday',\n",
    "    2: 'Wednesday',\n",
    "    3: 'Thursday',\n",
    "    4: 'Friday',\n",
    "    5: 'Saturday',\n",
    "    6: 'Sunday',\n",
    "}\n",
    "HOURS = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16',\n",
    "         '17', '18', '19', '20', '21', '22', '23']\n",
    "\n",
    "\n",
    "def getDataPoint(i_line):\n",
    "    splitLine = i_line.split(' - ')\n",
    "    dateTime = splitLine[0]\n",
    "    date, time = dateTime.split(', ')\n",
    "    return date, time\n",
    "\n",
    "\n",
    "def startsWithDateAndTime(i_starting_line):\n",
    "    # Checking if the line is compatible to one of the starting line patterns.\n",
    "    pattern1 = '^([0-9]+)(/)([0-9]+)(/)([0-9][0-9]), ([0-9]+):([0-9][0-9]) -'\n",
    "    pattern2 = '^([0-9]+)(.)([0-9]+)(.)([0-9][0-9][0-9][0-9]), ([0-9]+):([0-9][0-9]) -'\n",
    "    return re.match(pattern1, i_starting_line) or re.match(pattern2, i_starting_line)\n",
    "\n",
    "\n",
    "def addEmptyHoursRows(i_df, i_lstHours):\n",
    "    # Adding new rows with zeros (represents the hours with no messages in all Weekdays)\n",
    "    currDFHours = i_df.index.values.tolist()\n",
    "    for hour in i_lstHours:\n",
    "        if hour not in currDFHours:\n",
    "            i_df.loc[hour] = [0, 0, 0, 0, 0, 0, 0]\n",
    "\n",
    "\n",
    "def creatingDFFromFile(i_filePath):\n",
    "    parsedData = []  # List to keep track of data so it can be used by a Pandas dataframe\n",
    "    with open(i_filePath, encoding=\"utf-8\") as fp:\n",
    "        # Skipping first line of the file because contains information related to something about end-to-end encryption\n",
    "        fp.readline()\n",
    "        date, time = None, None\n",
    "        while True:\n",
    "            line = fp.readline()\n",
    "            if not line:\n",
    "                break\n",
    "            line = line.strip()\n",
    "            if startsWithDateAndTime(line):\n",
    "                date, time = getDataPoint(line)\n",
    "                parsedData.append([date, time])\n",
    "\n",
    "    df = pd.DataFrame(parsedData, columns=['Date', 'Time'])  # Initializing a pandas Dataframe.\n",
    "    # changing datatype of \"Date\" column.\n",
    "    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n",
    "\n",
    "    # Dropping Nan values from dataset\n",
    "    df = df.dropna()\n",
    "    df = df.reset_index(drop=True)\n",
    "\n",
    "    df['Weekdays'] = df['Date'].dt.weekday.map(DAYS)  # matches date with corresponded day to a new column\n",
    "    df = df[['Date', 'Weekdays', 'Time']]  # rearranging df columns\n",
    "    return df\n",
    "\n",
    "\n",
    "def arrangeDFByHours(i_df):\n",
    "    lst = []\n",
    "    for i in i_df['Time']:  # e.g: '16:24'\n",
    "        lst.append(i.split(':')[0])  # lst: 16,22,00,.... (Hours list)\n",
    "\n",
    "    i_df['Hour'] = lst  # adding new hour column\n",
    "    i_df = i_df.groupby(['Hour', 'Weekdays'], as_index=False)['Time'].count()  # summarize num of messages in each hour\n",
    "    # on each Weekday.\n",
    "    i_df = i_df.rename(columns={\"Time\": \"#Messages\"})\n",
    "    return i_df\n",
    "\n",
    "\n",
    "def createHeatmapData(i_df):\n",
    "    # Create a matrix ( yAxis - Hour, xAxis - Weekdays, values: #messages )\n",
    "    heatmap_data = i_df.pivot(index='Hour', columns='Weekdays', values='#Messages')\n",
    "    heatmap_data = heatmap_data.fillna(0)  # replace nan values with 0.\n",
    "    heatmap_data = heatmap_data[\n",
    "        [DAYS[6], DAYS[0], DAYS[1], DAYS[2], DAYS[3], DAYS[4], DAYS[5]]]  # Reorder the days columns sequence\n",
    "\n",
    "    addEmptyHoursRows(heatmap_data, HOURS)  # Adding rows with zero to hours with no messages.\n",
    "    heatmap_data = heatmap_data.sort_values(by=['Hour'], ascending=False)\n",
    "    heatmap_data = changeTo2HoursScale(heatmap_data)\n",
    "    return heatmap_data\n",
    "\n",
    "\n",
    "def changeTo2HoursScale(i_heatmap_data):\n",
    "    for index in i_heatmap_data.index.values.tolist():\n",
    "        if int(index) % 2 == 0:\n",
    "            continue\n",
    "        else:\n",
    "            for day in DAYS.values():\n",
    "                i_heatmap_data[day][int(index)] += i_heatmap_data[day][int(index) - 1]  # Adding the number of messages\n",
    "                # from the next hour to the existing hour.\n",
    "\n",
    "    # Staying with the even hours only ( 2 hours scale )\n",
    "    for index in i_heatmap_data.index.values.tolist():\n",
    "        if int(index) % 2 == 0:\n",
    "            i_heatmap_data = i_heatmap_data.drop(i_heatmap_data.index[int(index)])\n",
    "    return i_heatmap_data\n",
    "\n",
    "\n",
    "def createHeatmap(i_heatmap_data):\n",
    "    # Creating the heatmap window.\n",
    "    plt.figure('WhatsApp Heatmap', figsize=(10, 6))\n",
    "    plt.title(\"WhatsApp Heatmap\", color='#CD3333', size=16, fontstyle='oblique', fontweight='bold')\n",
    "    plt.gca().xaxis.label.set_size(14)\n",
    "    plt.gca().yaxis.label.set_size(14)\n",
    "    sns.heatmap(\n",
    "        data=i_heatmap_data,\n",
    "        cmap='OrRd',\n",
    "        annot=True,\n",
    "        fmt='.0f',\n",
    "        annot_kws={'fontsize': 8},\n",
    "    )\n",
    "\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def main():\n",
    "    # Uploading exported WhatsApp chat file\n",
    "    whatsapp_filePath = 'WhatsApp.txt'\n",
    "    df = creatingDFFromFile(whatsapp_filePath)\n",
    "    df = arrangeDFByHours(df)\n",
    "    heatmap_dataTable = createHeatmapData(df)\n",
    "    createHeatmap(heatmap_dataTable)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17565d9f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
